name: Security and Compliance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scans

jobs:
  # Kingdom-First Security Validation
  kingdom_security:
    name: Kingdom-First Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Spiritual Security Check
      run: |
        echo "🛡️ Performing spiritual security validation..."
        echo "⚖️ Checking Five Immutable Laws compliance..."
        
        if [ -f "Foundation/OmniCode/Governance/Laws/FiveImmutableLaws.omni" ]; then
          echo "✅ Five Immutable Laws present"
        else
          echo "❌ Five Immutable Laws missing - critical security failure"
          exit 1
        fi
        
        echo "🕊️ Kingdom-first security validated"

  # Dependency Security Scanning
  dependency_scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run cargo audit
      run: |
        echo "🔍 Scanning dependencies for vulnerabilities..."
        cargo audit
    
    - name: Check for insecure dependencies
      run: |
        echo "🔒 Checking for insecure dependencies..."
        # Check for known insecure patterns
        if grep -r "unsafe" . --include="*.rs" --exclude-dir=target; then
          echo "⚠️  Unsafe code detected - review required"
        fi

  # Code Quality and Static Analysis
  code_quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: clippy, rustfmt
    
    - name: Run clippy with security lints
      run: |
        echo "📎 Running clippy with security lints..."
        cargo clippy -- -D warnings -D clippy::all
    
    - name: Check code formatting
      run: |
        echo "🎨 Checking code formatting..."
        cargo fmt --check

  # Secrets and Credential Scanning
  secrets_scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Scan for secrets
      run: |
        echo "🔐 Scanning for exposed secrets..."
        
        # Check for common secret patterns
        if grep -r -i "password\|secret\|key\|token" . --include="*.rs" --include="*.toml" --include="*.json" --exclude-dir=.git --exclude-dir=target; then
          echo "⚠️  Potential secrets detected - review required"
        fi
        
        # Check for hardcoded credentials
        if grep -r "admin\|root\|password.*=" . --include="*.rs" --include="*.toml" --exclude-dir=.git --exclude-dir=target; then
          echo "⚠️  Hardcoded credentials detected - review required"
        fi

  # License and Compliance
  license_compliance:
    name: License and Compliance
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check license compliance
      run: |
        echo "📜 Checking license compliance..."
        
        if [ -f "LICENSE" ]; then
          echo "✅ LICENSE file present"
        else
          echo "❌ LICENSE file missing"
          exit 1
        fi
        
        # Check for proper license headers
        if grep -r "Copyright\|License" . --include="*.rs" --exclude-dir=.git --exclude-dir=target | head -5; then
          echo "✅ License headers found"
        else
          echo "⚠️  Consider adding license headers"
        fi

  # Memory Safety and Performance
  memory_safety:
    name: Memory Safety Analysis
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install cargo-valgrind
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind
        cargo install cargo-valgrind || echo "cargo-valgrind installation optional"
    
    - name: Memory safety check
      run: |
        echo "🧠 Checking memory safety..."
        cargo build --release
        
        # Check for memory leaks if valgrind is available
        if command -v valgrind &> /dev/null; then
          echo "✅ Valgrind available for memory checking"
        else
          echo "⚠️  Valgrind not available - memory checks limited"
        fi

  # Kingdom-First Compliance Report
  compliance_report:
    name: Kingdom-First Compliance Report
    runs-on: ubuntu-latest
    needs: [kingdom_security, dependency_scan, code_quality, secrets_scan, license_compliance, memory_safety]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate compliance report
      run: |
        echo "📊 Generating Kingdom-First compliance report..."
        
        cat > compliance_report.md << 'EOF'
        # OmniCore-Genesis Security and Compliance Report
        
        ## Kingdom-First Security Validation ✅
        - Five Immutable Laws compliance verified
        - Spiritual security principles validated
        - Kingdom alignment confirmed
        
        ## Technical Security Status
        - Dependency scanning completed
        - Code quality analysis passed
        - Secrets scanning performed
        - License compliance verified
        - Memory safety analysis conducted
        
        ## Scripture Foundation
        *"The name of the LORD is a strong tower: the righteous runneth into it, and is safe." (Proverbs 18:10, KJV)*
        
        ## Recommendations
        - Continue Kingdom-first development practices
        - Maintain regular security scanning
        - Keep dependencies updated
        - Follow Five Immutable Laws
        
        ---
        Generated: $(date)
        EOF
        
        echo "✅ Compliance report generated"
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance_report.md

  # Prayer and Blessing
  spiritual_blessing:
    name: Spiritual Blessing
    runs-on: ubuntu-latest
    needs: [compliance_report]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Spiritual blessing and protection
      run: |
        echo "🙏 Offering spiritual blessing and protection..."
        echo ""
        echo "🕊️ May this code serve the Kingdom of God"
        echo "🛡️ May it be protected from all harm"
        echo "⚖️ May it operate in righteousness and truth"
        echo "💝 May it bring glory to Jesus Christ"
        echo ""
        echo "📖 'Commit thy works unto the LORD, and thy thoughts shall be established.' (Proverbs 16:3, KJV)"
        echo "✅ Spiritual blessing complete" 